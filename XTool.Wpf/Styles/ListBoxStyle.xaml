<ResourceDictionary
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:Core="clr-namespace:FantaziaDesign.Wpf.Core"
	xmlns:DControls="clr-namespace:FantaziaDesign.Wpf.Controls">

	<BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />

	<Style x:Key="DStyle.ListBoxItem.Base" TargetType="{x:Type ListBoxItem}">
		<Setter Property="SnapsToDevicePixels" Value="True" />
		<Setter Property="Padding" Value="0" />
		<Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
		<Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
		<Setter Property="Background" Value="Transparent" />
		<Setter Property="BorderBrush" Value="Transparent" />
		<Setter Property="BorderThickness" Value="0" />
		<Setter Property="FocusVisualStyle" Value="{x:Null}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ListBoxItem}">
					<Grid>
						<Border
							x:Name="Bd"
							Padding="{TemplateBinding Padding}"
							Background="{TemplateBinding Background}"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}"
							SnapsToDevicePixels="true" />
						<Border Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
							<ContentPresenter
								HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
								VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
								SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
						</Border>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter TargetName="Bd" Property="Background" Value="{DynamicResource DBrush.Container.Fill.Neutral.Primary.Hover}" />
						</Trigger>
						<Trigger Property="IsSelected" Value="True">
							<Setter TargetName="Bd" Property="Background" Value="{DynamicResource DBrush.Container.Fill.Neutral.Primary.Actived}" />
						</Trigger>
						<Trigger Property="IsEnabled" Value="False">
							<Setter TargetName="Bd" Property="TextElement.Foreground" Value="{DynamicResource DBrush.Container.Fill.Disabled}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="DStyle.ListBoxItem.Transparent" TargetType="{x:Type ListBoxItem}">
		<Setter Property="SnapsToDevicePixels" Value="True" />
		<Setter Property="Padding" Value="0" />
		<Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
		<Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
		<Setter Property="Background" Value="Transparent" />
		<Setter Property="BorderBrush" Value="Transparent" />
		<Setter Property="BorderThickness" Value="0" />
		<Setter Property="FocusVisualStyle" Value="{x:Null}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ListBoxItem}">
					<Grid>
						<Border
							x:Name="Bd"
							Padding="{TemplateBinding Padding}"
							Background="{TemplateBinding Background}"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}"
							SnapsToDevicePixels="true" />
						<Border Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
							<ContentPresenter
								HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
								VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
								SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
						</Border>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsEnabled" Value="False">
							<Setter TargetName="Bd" Property="TextElement.Foreground" Value="{DynamicResource DBrush.Container.Fill.Disabled}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="DStyle.ListBoxItem.Switch" TargetType="{x:Type ListBoxItem}">
		<Setter Property="SnapsToDevicePixels" Value="True" />
		<Setter Property="Padding" Value="0" />
		<Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
		<Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
		<Setter Property="Background" Value="{DynamicResource DBrush.Container.Fill.Neutral.Primary.Normal}" />
		<Setter Property="Foreground" Value="{DynamicResource DBrush.Content.Fill.Neutral.Primary.Normal}" />
		<Setter Property="BorderThickness" Value="0" />
		<Setter Property="FocusVisualStyle" Value="{x:Null}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ListBoxItem}">
					<Grid>
						<Border
							x:Name="Bd"
							Padding="{TemplateBinding Padding}"
							Background="{TemplateBinding Background}"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}"
							SnapsToDevicePixels="true" />
						<Grid>
							<Grid.ColumnDefinitions>
								<ColumnDefinition />
								<ColumnDefinition Width="Auto" />
							</Grid.ColumnDefinitions>
							<ContentPresenter
								Margin="5"
								VerticalAlignment="Center"
								IsHitTestVisible="True"
								TextElement.Foreground="{TemplateBinding Foreground}" />
							<Border
								x:Name="background"
								Grid.Column="1"
								Width="40"
								Height="20"
								Margin="5"
								Background="{DynamicResource DBrush.Content.Fill.Disabled}"
								CornerRadius="10">
								<Border
									x:Name="indicator"
									Width="10"
									Height="10"
									Margin="5"
									HorizontalAlignment="Left"
									Background="{TemplateBinding Background}"
									CornerRadius="5" />
							</Border>
						</Grid>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter TargetName="Bd" Property="Background" Value="{DynamicResource DBrush.Container.Fill.Neutral.Primary.Hover}" />
						</Trigger>
						<Trigger Property="IsSelected" Value="True">
							<Setter TargetName="background" Property="Background" Value="{DynamicResource DBrush.Content.Fill.Accent.Primary.Normal}" />
							<Setter TargetName="indicator" Property="Background" Value="{DynamicResource DBrush.Content.Fill.AccentOnAccent.Primary.Normal}" />
							<Setter TargetName="indicator" Property="HorizontalAlignment" Value="Right" />

						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="DStyle.ListBoxItem.Indicated" TargetType="{x:Type ListBoxItem}">
		<Setter Property="SnapsToDevicePixels" Value="True" />
		<Setter Property="Padding" Value="0" />
		<Setter Property="Margin" Value="2,1" />
		<Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
		<Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
		<Setter Property="Background" Value="Transparent" />
		<Setter Property="BorderBrush" Value="Transparent" />
		<Setter Property="BorderThickness" Value="0" />
		<Setter Property="FocusVisualStyle" Value="{x:Null}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ListBoxItem}">
					<Grid Background="Transparent">
						<Border
							x:Name="Bd"
							Margin="{TemplateBinding Margin}"
							Padding="{TemplateBinding Padding}"
							Background="{TemplateBinding Background}"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}"
							CornerRadius="4"
							SnapsToDevicePixels="true" />
						<Border
							Margin="{TemplateBinding Margin}"
							Padding="{TemplateBinding Padding}"
							BorderThickness="{TemplateBinding BorderThickness}"
							SnapsToDevicePixels="true">
							<Grid>
								<Grid.ColumnDefinitions>
									<ColumnDefinition Width="Auto" />
									<ColumnDefinition />
								</Grid.ColumnDefinitions>
								<Border
									x:Name="indicator"
									Width="4"
									Height="16"
									HorizontalAlignment="Left"
									VerticalAlignment="Center"
									Background="{DynamicResource DBrush.Content.Fill.Accent.Primary.Normal}"
									CornerRadius="2"
									RenderTransformOrigin="0.5, 0.5">
									<UIElement.RenderTransform>
										<TransformGroup>
											<ScaleTransform ScaleY="0" />
											<SkewTransform />
											<RotateTransform />
											<TranslateTransform />
										</TransformGroup>
									</UIElement.RenderTransform>
								</Border>
								<ContentPresenter
									Grid.Column="1"
									HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
									VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
									SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
							</Grid>
						</Border>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter TargetName="Bd" Property="Background" Value="{DynamicResource DBrush.Container.Fill.Neutral.Primary.Hover}" />
						</Trigger>
						<Trigger Property="IsSelected" Value="True">
							<Setter TargetName="Bd" Property="Background" Value="{DynamicResource DBrush.Container.Fill.Neutral.Primary.Actived}" />
							<Trigger.EnterActions>
								<BeginStoryboard>
									<Storyboard>
										<DoubleAnimation
											Storyboard.TargetName="indicator"
											Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)"
											To="1"
											Duration="0:0:0.1">
											<DoubleAnimation.EasingFunction>
												<CubicEase EasingMode="EaseIn" />
											</DoubleAnimation.EasingFunction>
										</DoubleAnimation>
									</Storyboard>
								</BeginStoryboard>
							</Trigger.EnterActions>
							<Trigger.ExitActions>
								<BeginStoryboard>
									<Storyboard>
										<DoubleAnimation
											Storyboard.TargetName="indicator"
											Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)"
											To="0"
											Duration="0:0:0.1">
											<DoubleAnimation.EasingFunction>
												<CubicEase EasingMode="EaseOut" />
											</DoubleAnimation.EasingFunction>
										</DoubleAnimation>
									</Storyboard>
								</BeginStoryboard>
							</Trigger.ExitActions>
						</Trigger>
						<Trigger Property="IsEnabled" Value="False">
							<Setter TargetName="Bd" Property="TextElement.Foreground" Value="{DynamicResource DBrush.Container.Fill.Disabled}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="DStyle.ListBox.Base" TargetType="{x:Type ListBox}">
		<Setter Property="Background" Value="{DynamicResource DBrush.Container.Fill.Neutral.Primary.Normal}" />
		<Setter Property="BorderBrush" Value="{DynamicResource DBrush.Container.Stroke.Neutral.Primary.Normal}" />
		<Setter Property="Foreground" Value="{DynamicResource DBrush.Content.Fill.Neutral.Primary.Normal}" />
		<Setter Property="BorderThickness" Value="0" />
		<Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
		<Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
		<Setter Property="ScrollViewer.CanContentScroll" Value="true" />
		<Setter Property="ScrollViewer.PanningMode" Value="Both" />
		<Setter Property="Stylus.IsFlicksEnabled" Value="False" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="ItemContainerStyle" Value="{StaticResource DStyle.ListBoxItem.Base}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ListBox}">
					<Border
						x:Name="Bd"
						Padding="0"
						Background="{TemplateBinding Background}"
						BorderBrush="{TemplateBinding BorderBrush}"
						BorderThickness="{TemplateBinding BorderThickness}"
						ClipToBounds="True"
						CornerRadius="{Binding (Core:Attachable.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"
						SnapsToDevicePixels="true">
						<DControls:RectangleClipper CornerRadius="{Binding (Core:Attachable.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" IsChildClippingEnabled="True">
							<ScrollViewer Padding="{TemplateBinding Padding}" Focusable="false">
								<ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
							</ScrollViewer>
						</DControls:RectangleClipper>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsEnabled" Value="false">
							<Setter TargetName="Bd" Property="BorderBrush" Value="{DynamicResource DBrush.Container.Stroke.Disabled}" />
						</Trigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsGrouping" Value="true" />
								<Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false" />
							</MultiTrigger.Conditions>
							<Setter Property="ScrollViewer.CanContentScroll" Value="false" />
						</MultiTrigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style
		x:Key="DStyle.ListBox.Transparent"
		BasedOn="{StaticResource DStyle.ListBox.Base}"
		TargetType="{x:Type ListBox}">
		<Setter Property="ItemContainerStyle" Value="{StaticResource DStyle.ListBoxItem.Transparent}" />
	</Style>

	<Style x:Key="DStyle.ListViewItem.Base" TargetType="{x:Type ListViewItem}">
		<Setter Property="SnapsToDevicePixels" Value="True" />
		<Setter Property="Padding" Value="10,5" />
		<Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
		<Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
		<Setter Property="Background" Value="Transparent" />
		<Setter Property="BorderBrush" Value="Transparent" />
		<Setter Property="BorderThickness" Value="0" />
		<Setter Property="FocusVisualStyle" Value="{x:Null}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ListViewItem}">
					<Grid>
						<Border
							x:Name="Bd"
							Padding="{TemplateBinding Padding}"
							Background="{TemplateBinding Background}"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}"
							SnapsToDevicePixels="true" />
						<Border Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
							<GridViewRowPresenter
								HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
								VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
								SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
						</Border>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter TargetName="Bd" Property="Background" Value="{DynamicResource DBrush.Container.Fill.Neutral.Primary.Hover}" />
						</Trigger>
						<Trigger Property="IsSelected" Value="True">
							<Setter TargetName="Bd" Property="Background" Value="{DynamicResource DBrush.Container.Fill.Neutral.Primary.Actived}" />
						</Trigger>
						<Trigger Property="IsEnabled" Value="False">
							<Setter TargetName="Bd" Property="TextElement.Foreground" Value="{DynamicResource DBrush.Container.Stroke.Disabled}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="DStyle.ListView.Base" TargetType="{x:Type ListView}">
		<Setter Property="Background" Value="{DynamicResource DBrush.Container.Fill.Neutral.Primary.Normal}" />
		<Setter Property="BorderBrush" Value="{DynamicResource DBrush.Container.Stroke.Neutral.Primary.Normal}" />
		<Setter Property="Foreground" Value="{DynamicResource DBrush.Content.Fill.Neutral.Primary.Normal}" />
		<Setter Property="BorderThickness" Value="0" />
		<Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
		<Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
		<Setter Property="ScrollViewer.CanContentScroll" Value="true" />
		<Setter Property="ScrollViewer.PanningMode" Value="Both" />
		<Setter Property="Stylus.IsFlicksEnabled" Value="False" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="ItemContainerStyle" Value="{StaticResource DStyle.ListViewItem.Base}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ListView}">
					<DControls:ClippedContentControl
						x:Name="Bd"
						Background="{TemplateBinding Background}"
						BorderBrush="{TemplateBinding BorderBrush}"
						BorderThickness="{TemplateBinding BorderThickness}"
						CornerRadius="{Binding Path=(Core:Attachable.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"
						IsBorderClipperEnabled="True"
						SnapsToDevicePixels="true">
						<ScrollViewer Padding="{TemplateBinding Padding}" Style="{DynamicResource DStyle.ScrollViewer.ForListViewBase}">
							<ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
						</ScrollViewer>
					</DControls:ClippedContentControl>
					<ControlTemplate.Triggers>
						<Trigger Property="IsEnabled" Value="false">
							<Setter TargetName="Bd" Property="BorderBrush" Value="{DynamicResource DBrush.Container.Stroke.Disabled}" />
						</Trigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsGrouping" Value="true" />
								<Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false" />
							</MultiTrigger.Conditions>
							<Setter Property="ScrollViewer.CanContentScroll" Value="false" />
						</MultiTrigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="DStyle.ScrollViewer.ForListViewBase" TargetType="{x:Type ScrollViewer}">
		<Setter Property="Focusable" Value="False" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ScrollViewer}">
					<Grid Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="*" />
							<ColumnDefinition Width="Auto" />
						</Grid.ColumnDefinitions>
						<Grid.RowDefinitions>
							<RowDefinition Height="Auto" />
							<RowDefinition Height="*" />
							<RowDefinition Height="Auto" />
						</Grid.RowDefinitions>
						<ScrollViewer
							Grid.ColumnSpan="2"
							Background="Transparent"
							Focusable="False"
							HorizontalScrollBarVisibility="Hidden"
							VerticalScrollBarVisibility="Hidden">
							<GridViewHeaderRowPresenter
								Margin="0"
								AllowsColumnReorder="{Binding TemplatedParent.View.AllowsColumnReorder, RelativeSource={RelativeSource TemplatedParent}}"
								ColumnHeaderContainerStyle="{Binding TemplatedParent.View.ColumnHeaderContainerStyle, RelativeSource={RelativeSource TemplatedParent}}"
								ColumnHeaderContextMenu="{Binding TemplatedParent.View.ColumnHeaderContextMenu, RelativeSource={RelativeSource TemplatedParent}}"
								ColumnHeaderTemplate="{Binding TemplatedParent.View.ColumnHeaderTemplate, RelativeSource={RelativeSource TemplatedParent}}"
								ColumnHeaderToolTip="{Binding TemplatedParent.View.ColumnHeaderToolTip, RelativeSource={RelativeSource TemplatedParent}}"
								Columns="{Binding TemplatedParent.View.Columns, RelativeSource={RelativeSource TemplatedParent}}"
								SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
						</ScrollViewer>
						<ScrollContentPresenter
							x:Name="PART_ScrollContentPresenter"
							Grid.Row="1"
							CanContentScroll="{TemplateBinding CanContentScroll}"
							CanHorizontallyScroll="False"
							CanVerticallyScroll="False"
							Content="{TemplateBinding Content}"
							ContentTemplate="{TemplateBinding ContentTemplate}"
							KeyboardNavigation.DirectionalNavigation="Local"
							SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
						<ScrollBar
							x:Name="PART_HorizontalScrollBar"
							Grid.Row="2"
							Grid.ColumnSpan="2"
							Cursor="Arrow"
							Maximum="{TemplateBinding ScrollableWidth}"
							Minimum="0"
							Orientation="Horizontal"
							Style="{DynamicResource DStyle.ScrollBar.Base}"
							ViewportSize="{TemplateBinding ViewportWidth}"
							Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"
							Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
						<ScrollBar
							x:Name="PART_VerticalScrollBar"
							Grid.Row="1"
							Grid.Column="1"
							Cursor="Arrow"
							Maximum="{TemplateBinding ScrollableHeight}"
							Minimum="0"
							Orientation="Vertical"
							Style="{DynamicResource DStyle.ScrollBar.Base}"
							ViewportSize="{TemplateBinding ViewportHeight}"
							Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"
							Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="DStyle.ColumnHeaderGripper.Base" TargetType="{x:Type Thumb}">
		<Setter Property="Width" Value="7" />
		<Setter Property="FrameworkElement.Cursor" Value="SizeWE" />
		<Setter Property="UIElement.SnapsToDevicePixels" Value="True" />
		<Setter Property="Padding" Value="3,0" />
		<Setter Property="Background" Value="Transparent" />
		<Setter Property="FrameworkElement.OverridesDefaultStyle" Value="True" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Thumb}">
					<Border
						Name="PART_Border"
						Padding="{TemplateBinding Padding}"
						Background="{TemplateBinding Background}"
						SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
						<Border
							x:Name="visiblePart"
							Background="{DynamicResource DBrush.Container.Stroke.Accent.Primary.Normal}"
							Opacity="0" />
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="UIElement.IsMouseOver" Value="True">
							<Setter TargetName="visiblePart" Property="Opacity" Value="0.8" />
						</Trigger>
						<Trigger Property="UIElement.IsFocused" Value="True">
							<Setter TargetName="visiblePart" Property="Opacity" Value="1" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="DStyle.RowHeaderGripper.Base" TargetType="{x:Type Thumb}">
		<Setter Property="Height" Value="7" />
		<Setter Property="FrameworkElement.Cursor" Value="SizeNS" />
		<Setter Property="UIElement.SnapsToDevicePixels" Value="True" />
		<Setter Property="Padding" Value="0,3" />
		<Setter Property="Background" Value="Transparent" />
		<Setter Property="FrameworkElement.OverridesDefaultStyle" Value="True" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Thumb}">
					<Border
						Name="PART_Border"
						Padding="{TemplateBinding Padding}"
						Background="{TemplateBinding Background}"
						SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
						<Border
							x:Name="visiblePart"
							Background="{DynamicResource DBrush.Container.Stroke.Accent.Primary.Normal}"
							Opacity="0" />
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="UIElement.IsMouseOver" Value="True">
							<Setter TargetName="visiblePart" Property="Opacity" Value="0.8" />
						</Trigger>
						<Trigger Property="UIElement.IsFocused" Value="True">
							<Setter TargetName="visiblePart" Property="Opacity" Value="1" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="DStyle.ColumnHeaderGripper.Transparent" TargetType="{x:Type Thumb}">
		<Setter Property="Width" Value="4" />
		<Setter Property="FrameworkElement.Cursor" Value="SizeWE" />
		<Setter Property="UIElement.SnapsToDevicePixels" Value="True" />
		<Setter Property="Background" Value="Transparent" />
		<Setter Property="FrameworkElement.OverridesDefaultStyle" Value="True" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Thumb}">
					<Border
						Name="PART_Border"
						Padding="{TemplateBinding Padding}"
						Background="{TemplateBinding Background}"
						SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="DStyle.RowHeaderGripper.Transparent" TargetType="{x:Type Thumb}">
		<Setter Property="Height" Value="4" />
		<Setter Property="FrameworkElement.Cursor" Value="SizeNS" />
		<Setter Property="UIElement.SnapsToDevicePixels" Value="True" />
		<Setter Property="Background" Value="Transparent" />
		<Setter Property="FrameworkElement.OverridesDefaultStyle" Value="True" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Thumb}">
					<Border
						Name="PART_Border"
						Padding="{TemplateBinding Padding}"
						Background="{TemplateBinding Background}"
						SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="{x:Type GridViewColumnHeader}" TargetType="{x:Type GridViewColumnHeader}">
		<Setter Property="HorizontalContentAlignment" Value="Left" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="FontWeight" Value="Bold" />
		<Setter Property="FrameworkElement.OverridesDefaultStyle" Value="True" />
		<Setter Property="Padding" Value="2" />
		<Setter Property="Foreground" Value="{DynamicResource DBrush.Content.Fill.Neutral.Primary.Normal}" />
		<Setter Property="Background" Value="Transparent" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type GridViewColumnHeader}">
					<DockPanel Background="{TemplateBinding Background}">
						<Thumb
							Name="PART_HeaderGripper"
							Margin="0,0,-8,0"
							DockPanel.Dock="Right"
							Style="{StaticResource DStyle.ColumnHeaderGripper.Base}" />
						<Border
							Name="HeaderBorder"
							Margin="10,0,0,0"
							Padding="5">
							<ContentPresenter
								Name="HeaderContent"
								Margin="{TemplateBinding Padding}"
								HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
								VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
								RecognizesAccessKey="True"
								SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
						</Border>
					</DockPanel>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<Trigger Property="GridViewColumnHeader.Role" Value="Floating">
				<Setter Property="UIElement.Opacity" Value="0.7" />
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type GridViewColumnHeader}">
							<DockPanel Name="PART_FloatingHeaderCanvas">
								<Border BorderBrush="{DynamicResource DBrush.BaseColor.Background}" BorderThickness="1" />
							</DockPanel>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Trigger>
			<Trigger Property="GridViewColumnHeader.Role" Value="Padding">
				<Setter Property="UIElement.Opacity" Value="0.7" />
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type GridViewColumnHeader}">
							<Canvas Name="PART_FloatingHeaderCanvas" />
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Trigger>
		</Style.Triggers>
	</Style>

	<Style x:Key="DStyle.Button.ForDataGridSelectAll" TargetType="{x:Type Button}">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Button}">
					<Grid>
						<Border
							x:Name="Border"
							Background="{DynamicResource DBrush.Container.Fill.Accent.Primary.Normal}"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}"
							Opacity="0.2"
							SnapsToDevicePixels="True" />
						<Polygon
							x:Name="Arrow"
							Margin="8,8,3,3"
							HorizontalAlignment="Right"
							VerticalAlignment="Bottom"
							Fill="{DynamicResource DBrush.Content.Fill.Neutral.Primary.Normal}"
							Opacity="0.15"
							Points="0,10 10,10 10,0"
							Stretch="Uniform" />
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter TargetName="Border" Property="Background" Value="{DynamicResource DBrush.Container.Fill.Accent.Primary.Hover}" />
						</Trigger>
						<Trigger Property="IsPressed" Value="True">
							<Setter TargetName="Border" Property="Background" Value="{DynamicResource DBrush.Container.Fill.Accent.Primary.Actived}" />
						</Trigger>
						<Trigger Property="IsEnabled" Value="False">
							<Setter TargetName="Arrow" Property="Visibility" Value="Collapsed" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="DStyle.DataGridCell.Base" TargetType="{x:Type DataGridCell}">
		<Setter Property="Padding" Value="5" />
		<Setter Property="Background" Value="Transparent" />
		<Setter Property="BorderBrush" Value="Transparent" />
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type DataGridCell}">
					<Border
						Background="{TemplateBinding Background}"
						BorderBrush="{TemplateBinding BorderBrush}"
						BorderThickness="{TemplateBinding BorderThickness}"
						SnapsToDevicePixels="True">
						<ContentPresenter Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<Trigger Property="UIElement.IsKeyboardFocusWithin" Value="True">
				<Setter Property="BorderBrush" Value="{DynamicResource DBrush.Container.Stroke.Accent.Primary.Normal}" />
			</Trigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="DataGridCell.IsSelected" Value="True" />
					<Condition Property="Selector.IsSelectionActive" Value="False" />
				</MultiTrigger.Conditions>
				<Setter Property="Foreground" Value="{DynamicResource DBrush.Content.Fill.Neutral.Secondary.Normal}" />
				<Setter Property="Background" Value="Transparent" />
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="DataGridCell.IsSelected" Value="True" />
					<Condition Property="Selector.IsSelectionActive" Value="True" />
				</MultiTrigger.Conditions>
				<Setter Property="Foreground" Value="{DynamicResource DBrush.Content.Fill.Neutral.Secondary.Normal}" />
				<Setter Property="Background" Value="{DynamicResource DBrush.Container.Fill.Neutral.Secondary.Actived}" />
			</MultiTrigger>
			<Trigger Property="IsEnabled" Value="False">
				<Setter Property="UIElement.Opacity" Value="0.5" />
			</Trigger>
		</Style.Triggers>
	</Style>

	<Style x:Key="DStyle.DataGridRowHeader.Base" TargetType="{x:Type DataGridRowHeader}">
		<Setter Property="BorderBrush" Value="{DynamicResource DBrush.Container.Stroke.Neutral.Primary.Normal}" />
		<Setter Property="BorderThickness" Value="1,0,1,1" />
		<Setter Property="Background" Value="Transparent" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type DataGridRowHeader}">
					<Grid MinWidth="24">
						<Border
							Padding="{TemplateBinding Padding}"
							Background="{TemplateBinding Background}"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}">
							<Grid>
								<Grid.ColumnDefinitions>
									<ColumnDefinition />
									<ColumnDefinition Width="Auto" />
								</Grid.ColumnDefinitions>
								<ContentPresenter
									VerticalAlignment="Center"
									RecognizesAccessKey="True"
									SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
								<Control
									SnapsToDevicePixels="False"
									Template="{Binding ValidationErrorTemplate, RelativeSource={RelativeSource AncestorType={x:Type DataGridRow}}}"
									Visibility="{Binding (Validation.HasError), Converter={StaticResource BooleanToVisibilityConverter}, RelativeSource={RelativeSource AncestorType={x:Type DataGridRow}}}" />
							</Grid>
						</Border>
						<Border
							x:Name="activeRowMarker"
							Width="1"
							Margin="0,2"
							HorizontalAlignment="Left"
							Background="{Binding BorderBrush, RelativeSource={RelativeSource TemplatedParent}}" />
						<Thumb
							x:Name="PART_TopHeaderGripper"
							VerticalAlignment="Top"
							Style="{StaticResource DStyle.RowHeaderGripper.Transparent}" />
						<Thumb
							x:Name="PART_BottomHeaderGripper"
							VerticalAlignment="Bottom"
							Style="{StaticResource DStyle.RowHeaderGripper.Transparent}" />
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsRowSelected" Value="True">
							<Setter TargetName="activeRowMarker" Property="Background" Value="{DynamicResource DBrush.Content.Fill.Accent.Primary.Normal}" />
							<Setter TargetName="activeRowMarker" Property="Width" Value="2" />
							<Setter Property="Background" Value="{DynamicResource DBrush.Container.Fill.Neutral.Secondary.Actived}" />
						</Trigger>
						<Trigger Property="IsMouseOver" Value="true">
							<Setter Property="Background" Value="{DynamicResource DBrush.Container.Fill.Neutral.Secondary.Hover}" />
						</Trigger>
						<Trigger Property="IsPressed" Value="true">
							<Setter Property="Background" Value="{DynamicResource DBrush.Container.Fill.Neutral.Secondary.Actived}" />
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="TextElement.Foreground" Value="{DynamicResource DBrush.Content.Fill.Disabled}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="DStyle.DataGridRow.Base" TargetType="{x:Type DataGridRow}">
		<Setter Property="Background" Value="Transparent" />
		<Setter Property="SnapsToDevicePixels" Value="True" />
		<Setter Property="Validation.ErrorTemplate" Value="{x:Null}" />
		<Setter Property="ValidationErrorTemplate">
			<Setter.Value>
				<ControlTemplate>
					<TextBlock
						Margin="2,0,0,0"
						VerticalAlignment="Center"
						Foreground="{DynamicResource DBrush.SignalContent.Fill.Critical}"
						Text="!" />
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type DataGridRow}">
					<Border
						x:Name="DGR_Border"
						Background="{TemplateBinding Background}"
						BorderBrush="{TemplateBinding BorderBrush}"
						BorderThickness="{TemplateBinding BorderThickness}"
						SnapsToDevicePixels="True">
						<SelectiveScrollingGrid>
							<SelectiveScrollingGrid.ColumnDefinitions>
								<ColumnDefinition Width="Auto" />
								<ColumnDefinition />
							</SelectiveScrollingGrid.ColumnDefinitions>
							<SelectiveScrollingGrid.RowDefinitions>
								<RowDefinition />
								<RowDefinition Height="Auto" />
							</SelectiveScrollingGrid.RowDefinitions>
							<DataGridCellsPresenter
								Grid.Column="1"
								ItemsPanel="{TemplateBinding ItemsPanel}"
								SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
							<DataGridDetailsPresenter
								Grid.Row="1"
								Grid.Column="1"
								SelectiveScrollingGrid.SelectiveScrollingOrientation="{Binding AreRowDetailsFrozen, Converter={x:Static DataGrid.RowDetailsScrollingConverter}, ConverterParameter={x:Static SelectiveScrollingOrientation.Vertical}, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"
								Visibility="{TemplateBinding DetailsVisibility}" />
							<DataGridRowHeader
								Grid.RowSpan="2"
								SelectiveScrollingGrid.SelectiveScrollingOrientation="Vertical"
								Visibility="{Binding HeadersVisibility, Converter={x:Static DataGrid.HeadersVisibilityConverter}, ConverterParameter={x:Static DataGridHeadersVisibility.Row}, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" />
						</SelectiveScrollingGrid>
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<Trigger Property="IsSelected" Value="True">
				<Setter Property="Background" Value="{DynamicResource DBrush.Container.Fill.Neutral.Primary.Actived}" />
			</Trigger>
			<Trigger Property="IsNewItem" Value="True">
				<Setter Property="Margin" Value="{Binding NewItemMargin, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" />
			</Trigger>
		</Style.Triggers>
	</Style>

	<Style x:Key="DStyle.DataGridColumnHeader.Base" TargetType="{x:Type DataGridColumnHeader}">
		<Setter Property="BorderBrush" Value="{DynamicResource DBrush.Container.Stroke.Neutral.Primary.Normal}" />
		<Setter Property="BorderThickness" Value="0,1,1,1" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="FontWeight" Value="Bold" />
		<Setter Property="Padding" Value="2" />
		<Setter Property="Foreground" Value="{DynamicResource DBrush.Content.Fill.Neutral.Secondary.Normal}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type DataGridColumnHeader}">
					<Grid Background="Transparent">
						<Border
							Padding="{TemplateBinding Padding}"
							Background="{TemplateBinding Background}"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}">
							<ContentPresenter
								Margin="{TemplateBinding Padding}"
								HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
								VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
								RecognizesAccessKey="True"
								SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
						</Border>
						<Path
							x:Name="SortArrow"
							Margin="10"
							HorizontalAlignment="Right"
							VerticalAlignment="Center"
							Data="M0,0 L8,0 4,6 z"
							Fill="{TemplateBinding Foreground}"
							Opacity="0.8"
							Visibility="Collapsed" />
						<Thumb
							Name="PART_LeftHeaderGripper"
							HorizontalAlignment="Left"
							Style="{StaticResource DStyle.ColumnHeaderGripper.Transparent}" />
						<Thumb
							Name="PART_RightHeaderGripper"
							HorizontalAlignment="Right"
							Style="{StaticResource DStyle.ColumnHeaderGripper.Transparent}" />
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="true">
							<Setter Property="Background" Value="{DynamicResource DBrush.Container.Fill.Neutral.Secondary.Hover}" />
						</Trigger>
						<Trigger Property="IsPressed" Value="true">
							<Setter Property="Background" Value="{DynamicResource DBrush.Container.Fill.Neutral.Secondary.Actived}" />
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="TextElement.Foreground" Value="{DynamicResource DBrush.Content.Fill.Disabled}" />
						</Trigger>
						<Trigger Property="CanUserSort" Value="True">
							<Setter TargetName="SortArrow" Property="Visibility" Value="Visible" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="DStyle.DataGrid.Base" TargetType="{x:Type DataGrid}">
		<Setter Property="Background" Value="{DynamicResource DBrush.Container.Fill.Neutral.Primary.Normal}" />
		<Setter Property="BorderBrush" Value="{DynamicResource DBrush.Container.Stroke.Neutral.Primary.Normal}" />
		<Setter Property="Foreground" Value="{DynamicResource DBrush.Content.Fill.Neutral.Primary.Normal}" />
		<Setter Property="BorderThickness" Value="0" />
		<Setter Property="RowDetailsVisibilityMode" Value="VisibleWhenSelected" />
		<Setter Property="ScrollViewer.CanContentScroll" Value="true" />
		<Setter Property="ScrollViewer.PanningMode" Value="Both" />
		<Setter Property="Stylus.IsFlicksEnabled" Value="False" />
		<Setter Property="DataGrid.HorizontalGridLinesBrush" Value="{DynamicResource DBrush.GrayScaleColor.Background.Normal}" />
		<Setter Property="DataGrid.VerticalGridLinesBrush" Value="{DynamicResource DBrush.GrayScaleColor.Background.Normal}" />
		<Setter Property="RowHeaderStyle" Value="{StaticResource DStyle.DataGridRowHeader.Base}" />
		<Setter Property="ColumnHeaderStyle" Value="{StaticResource DStyle.DataGridColumnHeader.Base}" />
		<Setter Property="RowStyle" Value="{StaticResource DStyle.DataGridRow.Base}" />
		<Setter Property="CellStyle" Value="{StaticResource DStyle.DataGridCell.Base}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type DataGrid}">
					<Border
						Padding="{TemplateBinding Padding}"
						Background="{TemplateBinding Background}"
						BorderBrush="{TemplateBinding BorderBrush}"
						BorderThickness="{TemplateBinding BorderThickness}"
						SnapsToDevicePixels="True">
						<ScrollViewer x:Name="DG_ScrollViewer" Focusable="false">
							<ScrollViewer.Template>
								<ControlTemplate TargetType="{x:Type ScrollViewer}">
									<Grid>
										<Grid.ColumnDefinitions>
											<ColumnDefinition Width="Auto" />
											<ColumnDefinition Width="*" />
											<ColumnDefinition Width="Auto" />
										</Grid.ColumnDefinitions>
										<Grid.RowDefinitions>
											<RowDefinition Height="Auto" />
											<RowDefinition Height="*" />
											<RowDefinition Height="Auto" />
										</Grid.RowDefinitions>
										<Button
											Width="{Binding CellsPanelHorizontalOffset, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"
											BorderBrush="{DynamicResource DBrush.GrayScaleColor.Background.Normal}"
											BorderThickness="0,0,1,1"
											Command="{x:Static DataGrid.SelectAllCommand}"
											Focusable="false"
											Style="{StaticResource DStyle.Button.ForDataGridSelectAll}"
											Visibility="{Binding HeadersVisibility, Converter={x:Static DataGrid.HeadersVisibilityConverter}, ConverterParameter={x:Static DataGridHeadersVisibility.All}, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" />
										<DataGridColumnHeadersPresenter
											x:Name="PART_ColumnHeadersPresenter"
											Grid.Column="1"
											Visibility="{Binding HeadersVisibility, Converter={x:Static DataGrid.HeadersVisibilityConverter}, ConverterParameter={x:Static DataGridHeadersVisibility.Column}, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" />
										<ScrollContentPresenter
											x:Name="PART_ScrollContentPresenter"
											Grid.Row="1"
											Grid.ColumnSpan="2"
											CanContentScroll="{TemplateBinding CanContentScroll}" />
										<ScrollBar
											x:Name="PART_VerticalScrollBar"
											Grid.Row="1"
											Grid.Column="2"
											Maximum="{TemplateBinding ScrollableHeight}"
											Orientation="Vertical"
											ViewportSize="{TemplateBinding ViewportHeight}"
											Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"
											Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
										<Grid Grid.Row="2" Grid.Column="1">
											<Grid.ColumnDefinitions>
												<ColumnDefinition Width="{Binding NonFrozenColumnsViewportHorizontalOffset, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" />
												<ColumnDefinition Width="*" />
											</Grid.ColumnDefinitions>
											<ScrollBar
												x:Name="PART_HorizontalScrollBar"
												Grid.Column="1"
												Maximum="{TemplateBinding ScrollableWidth}"
												Orientation="Horizontal"
												ViewportSize="{TemplateBinding ViewportWidth}"
												Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"
												Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
										</Grid>
									</Grid>
								</ControlTemplate>
							</ScrollViewer.Template>
							<ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
						</ScrollViewer>
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsGrouping" Value="true" />
					<Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false" />
				</MultiTrigger.Conditions>
				<Setter Property="ScrollViewer.CanContentScroll" Value="false" />
			</MultiTrigger>
		</Style.Triggers>
	</Style>


</ResourceDictionary>