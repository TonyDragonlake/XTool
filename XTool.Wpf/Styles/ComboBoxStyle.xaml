<ResourceDictionary
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:Core="clr-namespace:FantaziaDesign.Wpf.Core"
	xmlns:DControls="clr-namespace:FantaziaDesign.Wpf.Controls">

	<Style x:Key="DStyle.ComboBoxItem.Base" TargetType="{x:Type ComboBoxItem}">
		<Setter Property="HorizontalAlignment" Value="Stretch" />
		<Setter Property="HorizontalContentAlignment" Value="Stretch" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="RenderOptions.ClearTypeHint" Value="Enabled" />
		<Setter Property="Margin" Value="0" />
		<Setter Property="BorderThickness" Value="0" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ComboBoxItem}">
					<Border
						x:Name="ItemBackground"
						Padding="5"
						Background="{TemplateBinding Background}"
						BorderBrush="{TemplateBinding BorderBrush}"
						BorderThickness="{TemplateBinding BorderThickness}"
						IsHitTestVisible="True"
						SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
						<ContentPresenter
							x:Name="contentPresenter"
							Margin="{TemplateBinding Padding}"
							HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
							VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsSelected" Value="True">
							<Setter TargetName="ItemBackground" Property="Background" Value="{DynamicResource DBrush.Container.Fill.Neutral.Secondary.Actived}" />
						</Trigger>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter TargetName="ItemBackground" Property="Background" Value="{DynamicResource DBrush.Container.Fill.Neutral.Secondary.Hover}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="DStyle.ToggleButton.ForComboBoxBase" TargetType="{x:Type ToggleButton}">
		<Setter Property="OverridesDefaultStyle" Value="true" />
		<Setter Property="IsTabStop" Value="false" />
		<Setter Property="Focusable" Value="false" />
		<Setter Property="ClickMode" Value="Press" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ToggleButton}">
					<Border
						x:Name="templateRoot"
						Background="{TemplateBinding Background}"
						BorderBrush="{TemplateBinding BorderBrush}"
						BorderThickness="{TemplateBinding BorderThickness}"
						CornerRadius="{Binding Path=(Core:Attachable.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"
						SnapsToDevicePixels="true">
						<Border
							x:Name="splitBorder"
							Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"
							Margin="0"
							HorizontalAlignment="Right"
							BorderBrush="Transparent"
							BorderThickness="1"
							SnapsToDevicePixels="true">
							<Path
								x:Name="arrow"
								Margin="0"
								HorizontalAlignment="Center"
								VerticalAlignment="Center"
								Data="F1 M 0,0 L 2.667,2.66665 L 5.3334,0 L 5.3334,-1.78168 L 2.6667,0.88501 L0,-1.78168 L0,0 Z"
								Fill="{DynamicResource DBrush.Container.Stroke.Disabled}" />
						</Border>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="true">
							<Setter TargetName="templateRoot" Property="Background" Value="{DynamicResource DBrush.Container.Fill.Neutral.Secondary.Hover}" />
							<Setter TargetName="arrow" Property="Fill" Value="{DynamicResource DBrush.Content.Fill.Neutral.Secondary.Normal}" />
						</Trigger>
						<Trigger Property="IsPressed" Value="true">
							<Setter TargetName="templateRoot" Property="Background" Value="{DynamicResource DBrush.Container.Fill.Neutral.Secondary.Actived}" />
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter TargetName="arrow" Property="Fill" Value="{DynamicResource DBrush.Container.Stroke.Disabled}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<ControlTemplate x:Key="DTemplate.ComboBox.Base" TargetType="{x:Type ComboBox}">
		<Grid x:Name="templateRoot" SnapsToDevicePixels="true">
			<Grid.ColumnDefinitions>
				<ColumnDefinition Width="*" />
				<ColumnDefinition Width="0" MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" />
			</Grid.ColumnDefinitions>
			<Popup
				x:Name="PART_Popup"
				Grid.ColumnSpan="2"
				Margin="1"
				AllowsTransparency="true"
				HorizontalOffset="-8"
				IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
				Placement="Bottom"
				PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
				<Grid x:Name="shadow" Background="Transparent">
					<DControls:ClippedContentControl
						x:Name="dropDownBorder"
						MinWidth="{Binding ActualWidth, ElementName=templateRoot}"
						MaxHeight="{TemplateBinding MaxDropDownHeight}"
						Margin="8,4,8,12"
						Background="{DynamicResource DBrush.Surface.Fill.Highlight}"
						BorderThickness="{TemplateBinding BorderThickness}"
						CornerRadius="{Binding Path=(Core:Attachable.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"
						IsBorderClipperEnabled="True">
						<UIElement.Effect>
							<DropShadowEffect
								BlurRadius="14"
								Direction="270"
								Opacity="0.42"
								ShadowDepth="4.5"
								Color="Gray" />
						</UIElement.Effect>
						<ScrollViewer
							x:Name="DropDownScrollViewer"
							HorizontalContentAlignment="Stretch"
							VerticalContentAlignment="Stretch">
							<Grid x:Name="grid" RenderOptions.ClearTypeHint="Enabled">
								<Canvas
									x:Name="canvas"
									Width="0"
									Height="0"
									HorizontalAlignment="Left"
									VerticalAlignment="Top">
									<Rectangle
										x:Name="opaqueRect"
										Width="{Binding ActualWidth, ElementName=dropDownBorder}"
										Height="{Binding ActualHeight, ElementName=dropDownBorder}"
										Fill="{Binding Background, ElementName=dropDownBorder}" />
								</Canvas>
								<ItemsPresenter
									x:Name="ItemsPresenter"
									KeyboardNavigation.DirectionalNavigation="Contained"
									SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
							</Grid>
						</ScrollViewer>
					</DControls:ClippedContentControl>
					<Border
						Margin="8,4,8,12"
						BorderBrush="{TemplateBinding BorderBrush}"
						BorderThickness="{TemplateBinding BorderThickness}"
						CornerRadius="{Binding Path=(Core:Attachable.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" />
				</Grid>
			</Popup>
			<ToggleButton
				x:Name="toggleButton"
				Grid.ColumnSpan="2"
				Core:Attachable.CornerRadius="{Binding Path=(Core:Attachable.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"
				Background="{TemplateBinding Background}"
				BorderBrush="{TemplateBinding BorderBrush}"
				BorderThickness="{TemplateBinding BorderThickness}"
				IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
				Style="{StaticResource DStyle.ToggleButton.ForComboBoxBase}" />
			<ContentPresenter
				x:Name="contentPresenter"
				Margin="{TemplateBinding Padding}"
				HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
				VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
				Content="{TemplateBinding SelectionBoxItem}"
				ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}"
				ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
				ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
				IsHitTestVisible="false"
				SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
		</Grid>
		<ControlTemplate.Triggers>
			<Trigger Property="HasItems" Value="false">
				<Setter TargetName="dropDownBorder" Property="Height" Value="95" />
			</Trigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsGrouping" Value="true" />
					<Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false" />
				</MultiTrigger.Conditions>
				<Setter Property="ScrollViewer.CanContentScroll" Value="false" />
			</MultiTrigger>
			<Trigger SourceName="DropDownScrollViewer" Property="ScrollViewer.CanContentScroll" Value="false">
				<Setter TargetName="opaqueRect" Property="Canvas.Top" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}" />
				<Setter TargetName="opaqueRect" Property="Canvas.Left" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}" />
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>

	<Style x:Key="DStyle.TextBox.ForComboBoxBase" TargetType="{x:Type TextBox}">
		<Setter Property="OverridesDefaultStyle" Value="true" />
		<Setter Property="AllowDrop" Value="true" />
		<Setter Property="MinWidth" Value="0" />
		<Setter Property="MinHeight" Value="0" />
		<Setter Property="FocusVisualStyle" Value="{x:Null}" />
		<Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst" />
		<Setter Property="Stylus.IsFlicksEnabled" Value="False" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type TextBox}">
					<ScrollViewer
						x:Name="PART_ContentHost"
						Background="Transparent"
						Focusable="false"
						HorizontalScrollBarVisibility="Hidden"
						VerticalScrollBarVisibility="Hidden" />
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<ControlTemplate x:Key="DTemplate.ComboBox.Editable" TargetType="{x:Type ComboBox}">
		<Grid x:Name="templateRoot" SnapsToDevicePixels="true">
			<Popup
				x:Name="PART_Popup"
				Margin="1"
				AllowsTransparency="true"
				HorizontalOffset="-8"
				IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
				Placement="Bottom"
				PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
				<DControls:SimplePanel x:Name="shadow" Background="Transparent">
					<DControls:ClippedContentControl
						x:Name="dropDownBorder"
						MinWidth="{Binding ActualWidth, ElementName=templateRoot}"
						MaxHeight="{TemplateBinding MaxDropDownHeight}"
						Margin="8,4,8,12"
						Background="{DynamicResource DBrush.BaseColor.Background}"
						BorderThickness="{TemplateBinding BorderThickness}"
						CornerRadius="{Binding Path=(Core:Attachable.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"
						IsBorderClipperEnabled="True">
						<UIElement.Effect>
							<DropShadowEffect
								BlurRadius="14"
								Direction="270"
								Opacity="0.42"
								ShadowDepth="4.5"
								Color="Gray" />
						</UIElement.Effect>
						<ScrollViewer
							x:Name="DropDownScrollViewer"
							HorizontalContentAlignment="Stretch"
							VerticalContentAlignment="Stretch">
							<Grid x:Name="grid" RenderOptions.ClearTypeHint="Enabled">
								<Canvas
									x:Name="canvas"
									Width="0"
									Height="0"
									HorizontalAlignment="Left"
									VerticalAlignment="Top">
									<Rectangle
										x:Name="opaqueRect"
										Width="{Binding ActualWidth, ElementName=dropDownBorder}"
										Height="{Binding ActualHeight, ElementName=dropDownBorder}"
										Fill="{Binding Background, ElementName=dropDownBorder}" />
								</Canvas>
								<ItemsPresenter
									x:Name="ItemsPresenter"
									KeyboardNavigation.DirectionalNavigation="Contained"
									SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
							</Grid>
						</ScrollViewer>
					</DControls:ClippedContentControl>
					<Border
						Margin="8,4,8,12"
						BorderBrush="{TemplateBinding BorderBrush}"
						BorderThickness="{TemplateBinding BorderThickness}"
						CornerRadius="{Binding Path=(Core:Attachable.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" />
				</DControls:SimplePanel>
			</Popup>
			<DControls:BorderClipper
				Background="{TemplateBinding Background}"
				BorderBrush="{TemplateBinding BorderBrush}"
				BorderThickness="{TemplateBinding BorderThickness}"
				CornerRadius="{Binding Path=(Core:Attachable.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
				<Grid>
					<Grid.ColumnDefinitions>
						<ColumnDefinition Width="*" />
						<ColumnDefinition Width="0" MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" />
					</Grid.ColumnDefinitions>
					<ToggleButton
						x:Name="toggleButton"
						Grid.Column="1"
						Background="Transparent"
						BorderThickness="0"
						IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
						Style="{StaticResource DStyle.ToggleButton.ForComboBoxBase}" />
					<TextBox
						x:Name="PART_EditableTextBox"
						Margin="{TemplateBinding Padding}"
						HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
						VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
						IsReadOnly="{Binding IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}"
						Style="{StaticResource DStyle.TextBox.ForComboBoxBase}" />
				</Grid>
			</DControls:BorderClipper>

		</Grid>
		<ControlTemplate.Triggers>
			<Trigger Property="IsEnabled" Value="false">
				<Setter TargetName="PART_EditableTextBox" Property="Opacity" Value="0.56" />
			</Trigger>
			<Trigger Property="IsKeyboardFocusWithin" Value="true">
				<Setter Property="Foreground" Value="{DynamicResource DBrush.BaseColor.Foreground}" />
			</Trigger>
			<Trigger Property="HasItems" Value="false">
				<Setter TargetName="dropDownBorder" Property="Height" Value="95" />
			</Trigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsGrouping" Value="true" />
					<Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false" />
				</MultiTrigger.Conditions>
				<Setter Property="ScrollViewer.CanContentScroll" Value="false" />
			</MultiTrigger>
			<Trigger SourceName="DropDownScrollViewer" Property="ScrollViewer.CanContentScroll" Value="false">
				<Setter TargetName="opaqueRect" Property="Canvas.Top" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}" />
				<Setter TargetName="opaqueRect" Property="Canvas.Left" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}" />
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>

	<Style x:Key="DStyle.ComboBox.Base" TargetType="{x:Type ComboBox}">
		<Setter Property="Background" Value="{DynamicResource DBrush.Container.Fill.Neutral.Primary.Normal}" />
		<Setter Property="BorderBrush" Value="{DynamicResource DBrush.Container.Stroke.Neutral.Primary.Normal}" />
		<Setter Property="Foreground" Value="{DynamicResource DBrush.Content.Fill.Neutral.Primary.Normal}" />
		<Setter Property="BorderThickness" Value="0" />
		<Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
		<Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
		<Setter Property="Padding" Value="9,5,4,5" />
		<Setter Property="ScrollViewer.CanContentScroll" Value="true" />
		<Setter Property="ScrollViewer.PanningMode" Value="Both" />
		<Setter Property="Stylus.IsFlicksEnabled" Value="False" />
		<Setter Property="ItemContainerStyle" Value="{StaticResource DStyle.ComboBoxItem.Base}" />
		<Setter Property="Template" Value="{StaticResource DTemplate.ComboBox.Base}" />
		<Style.Triggers>
			<Trigger Property="IsEditable" Value="true">
				<Setter Property="IsTabStop" Value="false" />
				<!--<Setter Property="Padding" Value="2"/>-->
				<Setter Property="Template" Value="{StaticResource DTemplate.ComboBox.Editable}" />
			</Trigger>
		</Style.Triggers>
	</Style>

</ResourceDictionary>