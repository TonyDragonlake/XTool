<ResourceDictionary
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:Core="clr-namespace:FantaziaDesign.Wpf.Core">

	<Style x:Key="DStyles.ToggleButton.Base" TargetType="{x:Type ToggleButton}">
		<Setter Property="Background" Value="Transparent" />
		<Setter Property="BorderBrush" Value="Transparent" />
		<Setter Property="Foreground" Value="{DynamicResource DBrush.Content.Fill.Neutral.Primary.Normal}" />
		<Setter Property="BorderThickness" Value="0" />
		<Setter Property="HorizontalContentAlignment" Value="Center" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="Padding" Value="5" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ToggleButton}">
					<Border
						x:Name="border"
						Padding="{TemplateBinding Padding}"
						Background="{TemplateBinding Background}"
						BorderBrush="{TemplateBinding BorderBrush}"
						BorderThickness="{TemplateBinding BorderThickness}"
						CornerRadius="{Binding Path=(Core:Attachable.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"
						RenderTransformOrigin="0.5,0.5"
						SnapsToDevicePixels="true">
						<ContentPresenter
							x:Name="contentPresenter"
							Margin="4"
							HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
							VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
							Focusable="False"
							RecognizesAccessKey="True"
							SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="true">
							<Setter TargetName="border" Property="Background" Value="{DynamicResource DBrush.Container.Fill.Neutral.Primary.Hover}" />
						</Trigger>
						<Trigger Property="IsPressed" Value="true">
							<Setter TargetName="border" Property="Background" Value="{DynamicResource DBrush.Container.Fill.Neutral.Primary.Actived}" />
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter TargetName="contentPresenter" Property="TextElement.Foreground" Value="{DynamicResource DBrush.Content.Fill.Disabled}" />
						</Trigger>
						<Trigger Property="IsChecked" Value="true">
							<Setter TargetName="border" Property="Background" Value="{DynamicResource DBrush.Container.Fill.Neutral.Primary.Actived}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="DStyles.ToggleButton.ThemeColor" TargetType="{x:Type ToggleButton}">
		<Setter Property="Background" Value="Transparent" />
		<Setter Property="BorderBrush" Value="Transparent" />
		<Setter Property="Foreground" Value="{DynamicResource DBrush.Content.Fill.Accent.Primary.Normal}" />
		<Setter Property="BorderThickness" Value="0" />
		<Setter Property="HorizontalContentAlignment" Value="Center" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="Padding" Value="5" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ToggleButton}">

					<Border
						x:Name="border"
						Padding="{TemplateBinding Padding}"
						Background="{TemplateBinding Background}"
						BorderBrush="{TemplateBinding BorderBrush}"
						BorderThickness="{TemplateBinding BorderThickness}"
						CornerRadius="{Binding Path=(Core:Attachable.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"
						RenderTransformOrigin="0.5,0.5"
						SnapsToDevicePixels="true">
						<ContentPresenter
							x:Name="contentPresenter"
							Margin="4"
							HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
							VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
							Focusable="False"
							RecognizesAccessKey="True"
							SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="true">
							<Setter TargetName="border" Property="Background" Value="{DynamicResource DBrush.Container.Fill.Neutral.Primary.Hover}" />
						</Trigger>
						<Trigger Property="IsPressed" Value="true">
							<Setter TargetName="border" Property="Background" Value="{DynamicResource DBrush.Container.Fill.Neutral.Primary.Actived}" />
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter TargetName="contentPresenter" Property="TextElement.Foreground" Value="{DynamicResource DBrush.Content.Fill.Disabled}" />
						</Trigger>
						<Trigger Property="IsChecked" Value="true">
							<Setter TargetName="border" Property="Background" Value="{DynamicResource DBrush.Container.Fill.Neutral.Primary.Actived}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="DStyles.ToggleButton.Transparent" TargetType="{x:Type ToggleButton}">
		<Setter Property="Background" Value="Transparent" />
		<Setter Property="BorderBrush" Value="Transparent" />
		<Setter Property="Foreground" Value="{DynamicResource DBrush.Content.Fill.Accent.Primary.Normal}" />
		<Setter Property="BorderThickness" Value="0" />
		<Setter Property="HorizontalContentAlignment" Value="Center" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="Padding" Value="5" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ToggleButton}">
					<Border
						x:Name="border"
						Padding="{TemplateBinding Padding}"
						Background="{TemplateBinding Background}"
						BorderBrush="{TemplateBinding BorderBrush}"
						BorderThickness="{TemplateBinding BorderThickness}"
						CornerRadius="{Binding Path=(Core:Attachable.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"
						RenderTransformOrigin="0.5,0.5"
						SnapsToDevicePixels="true">
						<ContentPresenter
							x:Name="contentPresenter"
							Margin="4"
							HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
							VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
							Focusable="False"
							RecognizesAccessKey="True"
							SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="true">
							<Setter TargetName="border" Property="Background" Value="{DynamicResource DBrush.Container.Fill.Neutral.Primary.Hover}" />
						</Trigger>
						<Trigger Property="IsPressed" Value="true">
							<Setter TargetName="border" Property="Background" Value="{DynamicResource DBrush.Container.Fill.Neutral.Primary.Actived}" />
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter TargetName="contentPresenter" Property="TextElement.Foreground" Value="{DynamicResource DBrush.Content.Fill.Disabled}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="DStyles.ToggleButton.Switch" TargetType="{x:Type ToggleButton}">
		<Setter Property="Background" Value="{DynamicResource DBrush.Container.Fill.Neutral.Primary.Normal}" />
		<Setter Property="Foreground" Value="{DynamicResource DBrush.Content.Fill.Neutral.Primary.Normal}" />
		<Setter Property="BorderThickness" Value="0" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ToggleButton}">
					<Border Background="Transparent">
						<Grid>
							<Grid.ColumnDefinitions>
								<ColumnDefinition />
								<ColumnDefinition Width="Auto" />
							</Grid.ColumnDefinitions>
							<ContentPresenter
								Margin="5"
								VerticalAlignment="Center"
								IsHitTestVisible="True"
								TextElement.Foreground="{TemplateBinding Foreground}" />
							<Border
								x:Name="background"
								Grid.Column="1"
								Width="40"
								Height="20"
								Background="{DynamicResource DBrush.Content.Fill.Disabled}"
								CornerRadius="10">
								<Border
									x:Name="indicator"
									Width="10"
									Height="10"
									Margin="5"
									HorizontalAlignment="Left"
									Background="{TemplateBinding Background}"
									CornerRadius="5" />
							</Border>
						</Grid>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsChecked" Value="True">
							<Setter TargetName="background" Property="Background" Value="{DynamicResource DBrush.Content.Fill.Accent.Primary.Normal}" />
							<Setter TargetName="indicator" Property="Background" Value="{DynamicResource DBrush.Content.Fill.AccentOnAccent.Primary.Normal}" />
							<Setter TargetName="indicator" Property="HorizontalAlignment" Value="Right" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="DStyle.CheckBox.Base" TargetType="{x:Type CheckBox}">
		<Setter Property="FocusVisualStyle" Value="{x:Null}" />
		<Setter Property="Background" Value="{DynamicResource DBrush.Container.Fill.Neutral.Primary.Normal}" />
		<Setter Property="BorderBrush" Value="{DynamicResource DBrush.Content.Fill.Accent.Primary.Normal}" />
		<Setter Property="Foreground" Value="{DynamicResource DBrush.Content.Fill.Accent.Primary.Normal}" />
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="Padding" Value="4" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type CheckBox}">
					<Grid
						x:Name="templateRoot"
						Background="Transparent"
						SnapsToDevicePixels="True">
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="Auto" />
							<ColumnDefinition Width="*" />
						</Grid.ColumnDefinitions>
						<Border
							x:Name="checkBoxBorder"
							Margin="1"
							Padding="{TemplateBinding Padding}"
							HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
							VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
							Background="{TemplateBinding Background}"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}">
							<Grid x:Name="markGrid">
								<Path
									x:Name="optionMark"
									Margin="1"
									Data="F1 M 9.97498,1.22334L 4.6983,9.09834L 4.52164,9.09834L 0,5.19331L 1.27664,3.52165L 4.255,6.08833L 8.33331,1.52588e-005L 9.97498,1.22334 Z "
									Fill="{TemplateBinding Foreground}"
									Opacity="0"
									Stretch="Uniform" />
								<Rectangle
									x:Name="indeterminateMark"
									Margin="2"
									Fill="{DynamicResource DBrush.Content.Fill.Disabled}"
									Opacity="0" />
							</Grid>
						</Border>
						<ContentPresenter
							x:Name="contentPresenter"
							Grid.Column="1"
							Margin="{TemplateBinding Padding}"
							HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
							VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
							Focusable="False"
							RecognizesAccessKey="True"
							SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="HasContent" Value="true">
							<Setter Property="Padding" Value="4,-1,0,0" />
						</Trigger>
						<Trigger Property="IsMouseOver" Value="true">
							<Setter TargetName="checkBoxBorder" Property="Background" Value="{DynamicResource DBrush.Container.Fill.Neutral.Primary.Hover}" />
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter TargetName="checkBoxBorder" Property="BorderBrush" Value="{DynamicResource DBrush.Container.Stroke.Disabled}" />
						</Trigger>
						<Trigger Property="IsPressed" Value="true">
							<Setter TargetName="checkBoxBorder" Property="Background" Value="{DynamicResource DBrush.Container.Fill.Neutral.Primary.Actived}" />
						</Trigger>
						<Trigger Property="IsChecked" Value="true">
							<Setter TargetName="optionMark" Property="Opacity" Value="1" />
							<Setter TargetName="indeterminateMark" Property="Opacity" Value="0" />
						</Trigger>
						<Trigger Property="IsChecked" Value="{x:Null}">
							<Setter TargetName="optionMark" Property="Opacity" Value="0" />
							<Setter TargetName="indeterminateMark" Property="Opacity" Value="1" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
</ResourceDictionary>